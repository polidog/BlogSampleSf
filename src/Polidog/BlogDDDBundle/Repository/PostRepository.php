<?php

namespace Polidog\BlogDDDBundle\Repository;
use Doctrine\Common\Collections\Criteria;
use PHPMentors\DomainKata\Entity\CriteriaInterface;
use PHPMentors\DomainKata\Repository\Operation\CriteriaBuilderInterface;
use Polidog\Blog\Model\Post\Post;
use Polidog\Blog\Model\Post\PostCriteria;
use Polidog\Blog\Model\Post\PostRepository as DomainPostRepository;
use Polidog\Blog\Model\Post\PostStatus;
use Polidog\BlogDDDBundle\DomainEntityConverter\PostConverter;
use vendor\polidog\blog\src\Model\Post\OpenPostSpecification;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository implements DomainPostRepository
{
    public function get(int $id) :?Post
    {
        /** @var \Polidog\BlogDDDBundle\Entity\Post $entity */
        $entity = $this->find($id);
        return (new PostConverter())->toPost($entity);
    }

    /**
     * @param int               $offset
     * @param int               $limit
     * @param PostCriteria|null $criteria
     * @return array
     */
    public function postList(int $offset, int $limit, PostCriteria $criteria = null)
    {
        $qb = $this->createQueryBuilder('p');
        if ($criteria !== null) {
            $qb->addCriteria($criteria->build());
        }

        $qb->orderBy('p.id', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        $postConverter = new PostConverter();
        return array_map(function(\Polidog\BlogDDDBundle\Entity\Post $post) use ($postConverter) {
            return $postConverter->toPost($post);
        }, $qb->getQuery()->getResult());

    }


    /**
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function findOpenPosts(int $offset, int $limit)
    {
        $qb = $this->createQueryBuilder("p");

        // 検索条件
        $qb->andWhere(
            $qb->expr()->eq('p.status', PostStatus::PUBLISHED)
        );

        $qb->orderBy('p.id', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        $postConverter = new PostConverter();
        return array_map(function(\Polidog\BlogDDDBundle\Entity\Post $post) use ($postConverter) {
            return $postConverter->toPost($post);
        }, $qb->getQuery()->getResult());

    }


    public function store(Post $post)
    {
        $entity = null;
        if ($post->getPostId()) {
            $entity = $this->find($post->getPostId());
        }

        $isFirst = false;
        if (empty($entity)) {
            $entity = new \Polidog\BlogDDDBundle\Entity\Post();
            $author = $this->_em->getRepository('PolidogBlogDDDBundle:User')->find($post->getAuthor()->id());
            $entity->setAuthor($author);
            $isFirst = true;
        }

        $entity->setStatus($post->getStatus()->getValue())
            ->setContent($post->getContent())
            ->setDisplayDate($post->getDisplayDate())
            ->setTitle($post->getTitle())
            ;

        if ($isFirst) {
            $this->_em->persist($entity);
        }
        $this->_em->flush();

    }

}
