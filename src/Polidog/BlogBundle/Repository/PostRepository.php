<?php

namespace Polidog\BlogBundle\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\QueryBuilder;
use Polidog\Blog\Model\Post\PostCriteria;
use Polidog\Blog\Model\Post\PostRepository as DomainPostRepository;
use Polidog\Blog\Model\Post\PostStatus;
use Polidog\BlogBundle\DomainEntityConverter\PostConverter;
use Polidog\BlogBundle\Entity\Post;

use JMS\DiExtraBundle\Annotation as DI;

/**
 * @DI\Service(autowire=true)
 *
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository implements DomainPostRepository
{
    /**
     * @var EntityManager
     */
    private $entityManager;

    /**
     * @var PostConverter
     */
    private $postConverter;

    /**
     * @param EntityManager $entityManager
     * @param PostConverter $postConverter
     */
    public function __construct(EntityManager $entityManager, PostConverter $postConverter)
    {
        $this->entityManager = $entityManager;
        $this->postConverter = $postConverter;
    }


    public function get(int $id) :?\Polidog\Blog\Model\Post\Post
    {
        /** @var \Polidog\BlogBundle\Entity\Post $entity */
        $entity = $this->find($id);
        if ($entity instanceof Post) {
            return $this->postConverter->toDomain($entity);
        }
    }

    /**
     * @param int               $offset
     * @param int               $limit
     * @param PostCriteria|null $criteria
     * @return array
     */
    public function postList(int $offset, int $limit, PostCriteria $criteria = null)
    {
        $qb = $this->createQueryBuilder('p');
        if ($criteria !== null) {
            $qb->addCriteria($criteria->build());
        }

        $qb->orderBy('p.id', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        $postConverter = $this->postConverter;

        return array_map(function(\Polidog\BlogBundle\Entity\Post $post) use ($postConverter) {
            return $this->postConverter->toDomain($post);
        }, $qb->getQuery()->getResult());

    }


    /**
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function findOpenPosts(int $offset, int $limit)
    {
        $qb = $this->createQueryBuilder("p");

        // 検索条件
        $qb->andWhere(
            $qb->expr()->eq('p.status', PostStatus::PUBLISHED)
        );

        $qb->orderBy('p.id', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        return array_map(function(\Polidog\BlogBundle\Entity\Post $post) use ($postConverter) {
            return $this->postConverter->toDomain($post);
        }, $qb->getQuery()->getResult());

    }


    public function store(\Polidog\Blog\Model\Post\Post $post)
    {
        $entity = null;
        if ($post->getPostId()) {
            $entity = $this->find($post->getPostId());
        }

        $isFirst = false;
        if (empty($entity)) {
            $entity = new \Polidog\BlogBundle\Entity\Post();
            $author = $this->entityManager->getRepository('PolidogBlogDDDBundle:User')->find($post->getAuthor()->id());
            $entity->setAuthor($author);
            $isFirst = true;
        }

        $entity->setStatus($post->getStatus()->getValue())
            ->setContent($post->getContent())
            ->setDisplayDate($post->getDisplayDate())
            ->setTitle($post->getTitle())
            ;

        if ($isFirst) {
            $this->entityManager->persist($entity);
        }
        $this->entityManager->flush();

    }

    private function find($id, $lockMode = null, $lockVersion = null)
    {
        return $this->entityManager->find(Post::class, $id, $lockMode, $lockVersion);
    }

    private function createQueryBuilder($alias, $indexBy = null) :QueryBuilder
    {
        return $this->entityManager->createQueryBuilder()
            ->select($alias)
            ->from(Post::class, $alias, $indexBy);
    }

}
